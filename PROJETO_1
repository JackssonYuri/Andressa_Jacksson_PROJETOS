//ListaEncadeadaSimples.c

#include <stdio.h>
#include <stdlib.h>
#include "ListaEncadeadaSimples.h"
//Jacksson Yuri e Andressa Nunes

/* função para inicializar a lista
@param função para inicializar a lista como nula
*/
Lista *inicializa()
{
	return NULL;
}

/*função cria lista
@param Função para criar a lista
*/
Lista *cria_lista()
{
	Lista *lista = (Lista*)malloc(sizeof(Lista));
	if(lista!=NULL)
		*lista = NULL; 
	return lista;
}
/*A função recebe a lista e retorna 1 se estiver vazia ou 0 se não estiver vazia. Como
@param lista - Função para saber se a lista está vazia
@returns - Retorna 1 se estiver vazia 
*/
int lista_vazia(Lista *lista)
{
  if (lista ==NULL)
  return 1;
  if(*lista==NULL)
  return 1;
   
	 return 0;
}
/* @param - Insere elemento no inicio da lista 
	@returns Retorna 1 se a lista for nula
*/
int inserirInicio(Lista *lista, int valor){
	if(lista == NULL){
		return 1;
}
    No *novo = (No*)malloc(sizeof(No));
    novo -> valor = valor; 
    novo -> proximo = *lista ;
    *lista = novo;
	return 0;
}
/* @param libera valores da lista */
void libera (Lista* lista)
{
 if(lista != NULL){ //a lista é válida se passar daqui
		Lista no;
			while((*lista) != NULL){
				no = *lista;
        lista = &(*lista)->proximo;
        free(no);
			}
 }
}
/* @param imprime valores dos elementos da lista */
void imprimir (Lista* lista)
{
 Lista p; /* variável auxiliar para percorrer a lista */
 for (p = *lista; p != NULL; p = p->proximo)
 	printf("impressao : %d\n", p -> valor);

}
/* @param remove valores da lista */
int remove_matricula(Lista* lista, int val)
{
  if(lista != NULL){

    Lista p = *lista;
    if((*lista)->valor == val){
      *lista = p->proximo;
      free(p);
      return 0;
    }

    Lista ant = p;

    for(p = p->proximo; p != NULL; p = p->proximo){
      if (p->valor == val){
        ant->proximo = p->proximo;
        free(p);
        break;
      }
      ant = ant->proximo;
      ant = p;
    }
    return 0;
  }
  return 1;
}




//ListaEncadeadaSimples.h

#ifndef LISTAENCADEADASIMPLES_H
#define LISTAENCADEADASIMPLES_H

#include <stdio.h>
#include <stdlib.h>

typedef struct No
{
    int valor;
    struct No *proximo;
} No;
typedef struct No* Lista;

typedef struct lista_com_tam
{
    Lista *inicio;
    int tam;
}  Lista_tam;

/* @param função que inicializa a lista como vazia */
Lista*inicializa();
/* @param função cria lista */
Lista *cria_lista(); 
/* @param função para testar se a lista é vazia */
int lista_vazia(Lista *lista); 
/* @param função para inserir no inicio da lista */
int inserirInicio(Lista *lista, int valor);
/* @param função para remover na lista */
int remove_matricula(Lista* lista, int val);
/* @param função para imprimir a lista */
void imprimir (Lista* lista);
/* @param função para liberar a lista*/
void libera (Lista* lista);

#endif

//Main
#include <stdio.h>
#include <stdlib.h>
#include "ListaEncadeadaSimples.h"

int main(){
    Lista* li; 
//criafila,  colocanafila,  tiradafila,  filavazia  e  filacheia. 
    li =  cria_lista();

    int a = inserirInicio(li, 50);
    printf("%d\n", a);

    int b = remove_matricula(li, 50);
		printf("%d\n", b);

    int z = lista_vazia(li);
		printf("%d\n", z);

    libera(li);


/*A fila deve ter um indicador de tamanho máximo de elementos, bem como os índices que indicam o início e o fim da fila. 
Escreva também uma interface filadeints.h  para o módulo. 
*/
//inserções e exclusões de elementos ocorrem nas extremidades da "lista"
//cada elemento aponta para seu sucessor na lista
//usa um nó descritor para representar o início e final da fila e uma indicação de final de fila

}

//Makefile
all: main

main: ListaEncadeadaSimples.o
	gcc main.c ListaEncadeadaSimples.o -o main
ListaEncad.o:
	gcc -c ListaEncadeadaSimples.c 
rm: 
	rm *.o
